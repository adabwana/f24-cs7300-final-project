{"title":"Principal Component Analysis","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"united","number-sections":false,"output-file":"neandersolve.pca.html"}},"code-block-background":true,"highlight-style":"atom-one"},"headingText":"Principal Component Analysis","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"neandersolve.pca_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"neandersolve.pca_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns neandersolve.pca\n  (:require\n   [neandersolve\n    [descriptive :as desc]\n    [eigen :as eigen]]\n   [uncomplicate.commons.core :refer [with-release]]\n   [uncomplicate.fluokitten.core :refer [fmap!]]\n   [uncomplicate.neanderthal\n    [core :refer [axpy col copy entry entry! mm mrows mv! ncols raw rk! scal!\n                  sum trans vctr]]\n    [native :refer [fge]]\n    [math :refer [sqrt]]\n    [random :refer [rand-normal! rand-uniform!]]]))\n```\n:::\n\n\n\n\nHigh-dimensional data often contains redundant or correlated features. While each feature may carry information, the true patterns often lie in lower-dimensional subspaces. *Principal Component Analysis* (PCA) provides a mathematical framework for discovering these intrinsic patterns by transforming data into a new coordinate system aligned with directions of maximum variance.\n\n\n## Mathematical Foundation\n\nFor a dataset with $n$ observations and $p$ features, represented as an $n \\times p$ matrix $\\mathbf{X}$, PCA seeks a transformation that reveals the underlying structure. This transformation comes from the *eigendecomposition* of the *covariance matrix*:\n\n$$\\mathbf{C} = \\frac{1}{n-1}\\mathbf{X}^T\\mathbf{X}$$\n\nThe *eigenvectors* of $\\mathbf{C}$ form the *principal components*, while their corresponding *eigenvalues* indicate the amount of variance explained by each component.\n\n\n## Data Preprocessing\n\nBefore computing principal components, we must ensure our data is properly *centered* and optionally *scaled*. This preprocessing step is crucial for PCA's effectiveness:\n\n\n::: {.sourceClojure}\n```clojure\n(defn center-data\n  \"Centers the data matrix by subtracting column means.\n   Returns [centered-data column-means].\"\n  [X]\n  (let [n (mrows X)\n        means (entry! (vctr X (ncols X)) 0.0)\n        centered (copy X)\n        ones (entry! (vctr X n) 1.0)]\n    ;; Compute means efficiently using matrix-vector multiplication\n    (mv! (/ 1.0 n) (trans X) ones 0.0 means)\n    ;; Center using rank-1 update with outer product of ones and means\n    (rk! -1.0 ones means centered)\n    [centered means]))\n```\n:::\n\n\nThe *centering operation* ensures that each feature has zero mean, removing location effects that could bias our variance calculations. For features measured on different scales, we also provide scaling to unit variance:\n\n\n::: {.sourceClojure}\n```clojure\n(defn scale-data\n  \"Scales the data matrix to unit variance.\n   Returns [scaled-data column-stds].\"\n  [X]\n  (let [p (ncols X)\n        stds (entry! (vctr X p) 0.0)\n        scaled (copy X)]\n    (loop [j 0]\n      (when (< j p)\n        (let [col-std (sqrt (desc/variance (col X j)))]\n          (entry! stds j col-std)\n          (scal! (/ 1.0 col-std) (col scaled j))\n          (recur (inc j)))))\n    [scaled stds]))\n```\n:::\n\n\n\n## Covariance Computation\n\nThe *covariance matrix* captures the relationships between features. For centered data $\\mathbf{X}$, we compute it efficiently through matrix multiplication:\n\n$$\\mathbf{C} = \\frac{1}{n-1}\\mathbf{X}^T\\mathbf{X}$$\n\n\n::: {.sourceClojure}\n```clojure\n(defn compute-covariance\n  \"Computes the covariance matrix of centered data.\n   Each row represents an observation, each column a variable.\"\n  [X-centered]\n  (let [n (mrows X-centered)\n        covar (mm (trans X-centered) X-centered)]\n    (scal! (/ 1.0 (dec n)) covar)))\n```\n:::\n\n\n\n## Model Fitting\n\nThe core PCA algorithm combines preprocessing, covariance computation, and eigendecomposition into a unified workflow. This process reveals the *principal components* and their relative importance in explaining data variance:\n\n1. Optionally *center* the data: $\\mathbf{X}_c = \\mathbf{X} - \\mathbf{1}\\boldsymbol{\\mu}^T$\n2. Optionally *scale* to unit variance: $\\mathbf{X}_s = \\mathbf{X}_c\\mathbf{D}^{-1}$\n3. Compute *covariance matrix*: $\\mathbf{C} = \\frac{1}{n-1}\\mathbf{X}_s^T\\mathbf{X}_s$\n4. Perform *eigendecomposition*: $\\mathbf{C} = \\Phi\\mathbf{\\Lambda}\\Phi^T$\n\n\n::: {.sourceClojure}\n```clojure\n(defn pca-fit\n  \"Fits PCA model to data matrix X.\n   Returns map containing principal components, explained variance, etc.\"\n  ([X]\n   (pca-fit X true true))\n  ([X center?]\n   (pca-fit X center? false))\n  ([X center? scale?]\n   (let [[X-processed means] (if center? \n                              (center-data X)\n                              [X (entry! (vctr X (ncols X)) 0.0)])\n         [X-final stds] (if scale? \n                         (scale-data X-processed)\n                         [X-processed (entry! (vctr X-processed (ncols X-processed)) 1.0)])\n         cov-matrix (compute-covariance X-final)\n         [eigenvals eigenvecs] (eigen/eigendecomposition cov-matrix)\n         total-var (sum eigenvals)\n         explained-var-ratio (fmap! #(/ % total-var) (copy eigenvals))]\n     {:components eigenvecs\n      :explained_variance eigenvals\n      :explained_variance_ratio explained-var-ratio\n      :means means\n      :scale stds})))\n```\n:::\n\n\n\n## Data Transformation\n\nOnce we have fitted a PCA model, we can transform new data into the *principal component space*. This transformation involves:\n\n1. *Centering*: $\\mathbf{X}_c = \\mathbf{X} - \\mathbf{1}\\boldsymbol{\\mu}^T$\n2. *Scaling*: $\\mathbf{X}_s = \\mathbf{X}_c\\mathbf{D}^{-1}$\n3. *Projection*: $\\mathbf{X}_{pca} = \\mathbf{X}_s\\Phi_k$\n\nwhere $\\Phi_k$ contains the first $k$ principal components.\n\n\n::: {.sourceClojure}\n```clojure\n(defn transform\n  \"Transforms data using fitted PCA model.\n   Optional n-components parameter for dimensionality reduction.\"\n  ([X pca-model]\n   (transform X pca-model (ncols (:components pca-model))))\n  ([X pca-model n-components]\n   (let [means (:means pca-model)\n         scale (:scale pca-model)\n         ;; Center the data\n         X-centered (if (some? means)\n                     (let [means-mat (raw X)]\n                       (loop [i 0]\n                         (when (< i (mrows X))\n                           (loop [j 0]\n                             (when (< j (ncols X))\n                               (entry! means-mat i j (entry means j))\n                               (recur (inc j))))\n                           (recur (inc i))))\n                       (axpy -1.0 means-mat X))\n                     X)\n         ;; Scale the centered data\n         X-scaled (if (some? scale)\n                   (let [scaled (copy X-centered)]\n                     (loop [j 0]\n                       (when (< j (ncols scaled))\n                         (scal! (/ 1.0 (entry scale j)) (col scaled j))\n                         (recur (inc j))))\n                     scaled)\n                   X-centered)\n         ;; Select components for dimensionality reduction\n         components (let [full-components (:components pca-model)\n                          selected (raw (mm (trans X) X))]\n                     (loop [i 0]\n                       (when (< i (mrows full-components))\n                         (loop [j 0]\n                           (when (< j n-components)\n                             (entry! selected i j (entry full-components i j))\n                             (recur (inc j))))\n                         (recur (inc i))))\n                     selected)]\n     ;; Transform the data using the principal components\n     (mm X-scaled components))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(transform (fge 2 3 [1 2 3 4 5 6]) (pca-fit (fge 2 3 [1 2 3 4 5 6])))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n#RealGEMatrix[float, mxn:2x3, layout:column]\n   ▥       ↓       ↓       ↓       ┓    \n   →       1.22    0.00    0.00         \n   →      -1.22   -0.00   -0.00         \n   ┗                               ┛    \n\n\n```\n:::\n\n\n\n## Inverse Transformation\n\nTo reconstruct data from its principal component representation, we reverse the transformation process:\n\n1. *Back-projection*: $\\mathbf{X}_s = \\mathbf{X}_{pca}\\Phi_k^T$\n2. *Unscaling*: $\\mathbf{X}_c = \\mathbf{X}_s\\mathbf{D}$\n3. *Uncentering*: $\\mathbf{X} = \\mathbf{X}_c + \\mathbf{1}\\boldsymbol{\\mu}^T$\n\n\n::: {.sourceClojure}\n```clojure\n(defn inverse-transform\n  \"Reconstructs original data from transformed data.\"\n  [X-transformed pca-model]\n  (let [;; Project back to original feature space\n        components (let [full-components (:components pca-model)\n                         selected (raw (mm (trans X-transformed) X-transformed))]\n                     (loop [i 0]\n                       (when (< i (mrows full-components))\n                         (loop [j 0]\n                          (when (< j (ncols X-transformed))\n                            (entry! selected i j (entry full-components i j))\n                            (recur (inc j))))\n                         (recur (inc i))))\n                     selected)\n        X-scaled (mm X-transformed (trans components))\n        ;; Unscale the data\n        X-unscaled (if (some? (:scale pca-model))\n                    (let [scaled (copy X-scaled)]\n                      (loop [j 0]\n                        (when (< j (ncols scaled))\n                          (scal! (entry (:scale pca-model) j) (col scaled j))\n                          (recur (inc j))))\n                      scaled)\n                    X-scaled)\n        ;; Uncenter the data\n        result (if (some? (:means pca-model))\n                (let [means-mat (raw X-unscaled)]\n                  (loop [i 0]\n                    (when (< i (mrows X-unscaled))\n                      (loop [j 0]\n                        (when (< j (ncols X-unscaled))\n                          (entry! means-mat i j (entry (:means pca-model) j))\n                          (recur (inc j))))\n                      (recur (inc i))))\n                  (axpy 1.0 means-mat X-unscaled))\n                X-unscaled)]\n    result))\n```\n:::\n\n\n\n## Utility Functions\n\n\n### Explained Variance Analysis\n\nThe *explained variance ratio* helps determine the optimal number of components to retain. The *cumulative explained variance* shows how much of the total variance is captured by the first $k$ components:\n\n\n::: {.sourceClojure}\n```clojure\n(defn explained-variance-cumsum\n  \"Computes cumulative explained variance ratio.\"\n  [pca-model]\n  (reductions + (:explained_variance_ratio pca-model)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn n-components-for-variance\n  \"Determines number of components needed to explain desired variance ratio.\"\n  [pca-model target-variance]\n  (let [cumsum (explained-variance-cumsum pca-model)]\n    (inc (count (take-while #(< % target-variance) cumsum)))))\n```\n:::\n\n\n\n### Example Usage\n\nTransform a simple 2x3 matrix:\n\n\n::: {.sourceClojure}\n```clojure\n(transform (fge 2 3 [1 2 3 4 5 6]) \n          (pca-fit (fge 2 3 [1 2 3 4 5 6])))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n#RealGEMatrix[float, mxn:2x3, layout:column]\n   ▥       ↓       ↓       ↓       ┓    \n   →       1.22    0.00    0.00         \n   →      -1.22   -0.00   -0.00         \n   ┗                               ┛    \n\n\n```\n:::\n\n\nReconstruct the original data:\n\n\n::: {.sourceClojure}\n```clojure\n(inverse-transform (fge 2 3 [1.22 -1.22 0 0 0 0 0]) \n                  (pca-fit (fge 2 3 [1 2 3 4 5 6])))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n#RealGEMatrix[float, mxn:2x3, layout:column]\n   ▥       ↓       ↓       ↓       ┓    \n   →       1.00    3.00    5.00         \n   →       2.00    4.00    6.00         \n   ┗                               ┛    \n\n\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"neandersolve.pca_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"neandersolve.pca_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns neandersolve.pca\n  (:require\n   [neandersolve\n    [descriptive :as desc]\n    [eigen :as eigen]]\n   [uncomplicate.commons.core :refer [with-release]]\n   [uncomplicate.fluokitten.core :refer [fmap!]]\n   [uncomplicate.neanderthal\n    [core :refer [axpy col copy entry entry! mm mrows mv! ncols raw rk! scal!\n                  sum trans vctr]]\n    [native :refer [fge]]\n    [math :refer [sqrt]]\n    [random :refer [rand-normal! rand-uniform!]]]))\n```\n:::\n\n\n\n# Principal Component Analysis\n\nHigh-dimensional data often contains redundant or correlated features. While each feature may carry information, the true patterns often lie in lower-dimensional subspaces. *Principal Component Analysis* (PCA) provides a mathematical framework for discovering these intrinsic patterns by transforming data into a new coordinate system aligned with directions of maximum variance.\n\n\n## Mathematical Foundation\n\nFor a dataset with $n$ observations and $p$ features, represented as an $n \\times p$ matrix $\\mathbf{X}$, PCA seeks a transformation that reveals the underlying structure. This transformation comes from the *eigendecomposition* of the *covariance matrix*:\n\n$$\\mathbf{C} = \\frac{1}{n-1}\\mathbf{X}^T\\mathbf{X}$$\n\nThe *eigenvectors* of $\\mathbf{C}$ form the *principal components*, while their corresponding *eigenvalues* indicate the amount of variance explained by each component.\n\n\n## Data Preprocessing\n\nBefore computing principal components, we must ensure our data is properly *centered* and optionally *scaled*. This preprocessing step is crucial for PCA's effectiveness:\n\n\n::: {.sourceClojure}\n```clojure\n(defn center-data\n  \"Centers the data matrix by subtracting column means.\n   Returns [centered-data column-means].\"\n  [X]\n  (let [n (mrows X)\n        means (entry! (vctr X (ncols X)) 0.0)\n        centered (copy X)\n        ones (entry! (vctr X n) 1.0)]\n    ;; Compute means efficiently using matrix-vector multiplication\n    (mv! (/ 1.0 n) (trans X) ones 0.0 means)\n    ;; Center using rank-1 update with outer product of ones and means\n    (rk! -1.0 ones means centered)\n    [centered means]))\n```\n:::\n\n\nThe *centering operation* ensures that each feature has zero mean, removing location effects that could bias our variance calculations. For features measured on different scales, we also provide scaling to unit variance:\n\n\n::: {.sourceClojure}\n```clojure\n(defn scale-data\n  \"Scales the data matrix to unit variance.\n   Returns [scaled-data column-stds].\"\n  [X]\n  (let [p (ncols X)\n        stds (entry! (vctr X p) 0.0)\n        scaled (copy X)]\n    (loop [j 0]\n      (when (< j p)\n        (let [col-std (sqrt (desc/variance (col X j)))]\n          (entry! stds j col-std)\n          (scal! (/ 1.0 col-std) (col scaled j))\n          (recur (inc j)))))\n    [scaled stds]))\n```\n:::\n\n\n\n## Covariance Computation\n\nThe *covariance matrix* captures the relationships between features. For centered data $\\mathbf{X}$, we compute it efficiently through matrix multiplication:\n\n$$\\mathbf{C} = \\frac{1}{n-1}\\mathbf{X}^T\\mathbf{X}$$\n\n\n::: {.sourceClojure}\n```clojure\n(defn compute-covariance\n  \"Computes the covariance matrix of centered data.\n   Each row represents an observation, each column a variable.\"\n  [X-centered]\n  (let [n (mrows X-centered)\n        covar (mm (trans X-centered) X-centered)]\n    (scal! (/ 1.0 (dec n)) covar)))\n```\n:::\n\n\n\n## Model Fitting\n\nThe core PCA algorithm combines preprocessing, covariance computation, and eigendecomposition into a unified workflow. This process reveals the *principal components* and their relative importance in explaining data variance:\n\n1. Optionally *center* the data: $\\mathbf{X}_c = \\mathbf{X} - \\mathbf{1}\\boldsymbol{\\mu}^T$\n2. Optionally *scale* to unit variance: $\\mathbf{X}_s = \\mathbf{X}_c\\mathbf{D}^{-1}$\n3. Compute *covariance matrix*: $\\mathbf{C} = \\frac{1}{n-1}\\mathbf{X}_s^T\\mathbf{X}_s$\n4. Perform *eigendecomposition*: $\\mathbf{C} = \\Phi\\mathbf{\\Lambda}\\Phi^T$\n\n\n::: {.sourceClojure}\n```clojure\n(defn pca-fit\n  \"Fits PCA model to data matrix X.\n   Returns map containing principal components, explained variance, etc.\"\n  ([X]\n   (pca-fit X true true))\n  ([X center?]\n   (pca-fit X center? false))\n  ([X center? scale?]\n   (let [[X-processed means] (if center? \n                              (center-data X)\n                              [X (entry! (vctr X (ncols X)) 0.0)])\n         [X-final stds] (if scale? \n                         (scale-data X-processed)\n                         [X-processed (entry! (vctr X-processed (ncols X-processed)) 1.0)])\n         cov-matrix (compute-covariance X-final)\n         [eigenvals eigenvecs] (eigen/eigendecomposition cov-matrix)\n         total-var (sum eigenvals)\n         explained-var-ratio (fmap! #(/ % total-var) (copy eigenvals))]\n     {:components eigenvecs\n      :explained_variance eigenvals\n      :explained_variance_ratio explained-var-ratio\n      :means means\n      :scale stds})))\n```\n:::\n\n\n\n## Data Transformation\n\nOnce we have fitted a PCA model, we can transform new data into the *principal component space*. This transformation involves:\n\n1. *Centering*: $\\mathbf{X}_c = \\mathbf{X} - \\mathbf{1}\\boldsymbol{\\mu}^T$\n2. *Scaling*: $\\mathbf{X}_s = \\mathbf{X}_c\\mathbf{D}^{-1}$\n3. *Projection*: $\\mathbf{X}_{pca} = \\mathbf{X}_s\\Phi_k$\n\nwhere $\\Phi_k$ contains the first $k$ principal components.\n\n\n::: {.sourceClojure}\n```clojure\n(defn transform\n  \"Transforms data using fitted PCA model.\n   Optional n-components parameter for dimensionality reduction.\"\n  ([X pca-model]\n   (transform X pca-model (ncols (:components pca-model))))\n  ([X pca-model n-components]\n   (let [means (:means pca-model)\n         scale (:scale pca-model)\n         ;; Center the data\n         X-centered (if (some? means)\n                     (let [means-mat (raw X)]\n                       (loop [i 0]\n                         (when (< i (mrows X))\n                           (loop [j 0]\n                             (when (< j (ncols X))\n                               (entry! means-mat i j (entry means j))\n                               (recur (inc j))))\n                           (recur (inc i))))\n                       (axpy -1.0 means-mat X))\n                     X)\n         ;; Scale the centered data\n         X-scaled (if (some? scale)\n                   (let [scaled (copy X-centered)]\n                     (loop [j 0]\n                       (when (< j (ncols scaled))\n                         (scal! (/ 1.0 (entry scale j)) (col scaled j))\n                         (recur (inc j))))\n                     scaled)\n                   X-centered)\n         ;; Select components for dimensionality reduction\n         components (let [full-components (:components pca-model)\n                          selected (raw (mm (trans X) X))]\n                     (loop [i 0]\n                       (when (< i (mrows full-components))\n                         (loop [j 0]\n                           (when (< j n-components)\n                             (entry! selected i j (entry full-components i j))\n                             (recur (inc j))))\n                         (recur (inc i))))\n                     selected)]\n     ;; Transform the data using the principal components\n     (mm X-scaled components))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(transform (fge 2 3 [1 2 3 4 5 6]) (pca-fit (fge 2 3 [1 2 3 4 5 6])))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n#RealGEMatrix[float, mxn:2x3, layout:column]\n   ▥       ↓       ↓       ↓       ┓    \n   →       1.22    0.00    0.00         \n   →      -1.22   -0.00   -0.00         \n   ┗                               ┛    \n\n\n```\n:::\n\n\n\n## Inverse Transformation\n\nTo reconstruct data from its principal component representation, we reverse the transformation process:\n\n1. *Back-projection*: $\\mathbf{X}_s = \\mathbf{X}_{pca}\\Phi_k^T$\n2. *Unscaling*: $\\mathbf{X}_c = \\mathbf{X}_s\\mathbf{D}$\n3. *Uncentering*: $\\mathbf{X} = \\mathbf{X}_c + \\mathbf{1}\\boldsymbol{\\mu}^T$\n\n\n::: {.sourceClojure}\n```clojure\n(defn inverse-transform\n  \"Reconstructs original data from transformed data.\"\n  [X-transformed pca-model]\n  (let [;; Project back to original feature space\n        components (let [full-components (:components pca-model)\n                         selected (raw (mm (trans X-transformed) X-transformed))]\n                     (loop [i 0]\n                       (when (< i (mrows full-components))\n                         (loop [j 0]\n                          (when (< j (ncols X-transformed))\n                            (entry! selected i j (entry full-components i j))\n                            (recur (inc j))))\n                         (recur (inc i))))\n                     selected)\n        X-scaled (mm X-transformed (trans components))\n        ;; Unscale the data\n        X-unscaled (if (some? (:scale pca-model))\n                    (let [scaled (copy X-scaled)]\n                      (loop [j 0]\n                        (when (< j (ncols scaled))\n                          (scal! (entry (:scale pca-model) j) (col scaled j))\n                          (recur (inc j))))\n                      scaled)\n                    X-scaled)\n        ;; Uncenter the data\n        result (if (some? (:means pca-model))\n                (let [means-mat (raw X-unscaled)]\n                  (loop [i 0]\n                    (when (< i (mrows X-unscaled))\n                      (loop [j 0]\n                        (when (< j (ncols X-unscaled))\n                          (entry! means-mat i j (entry (:means pca-model) j))\n                          (recur (inc j))))\n                      (recur (inc i))))\n                  (axpy 1.0 means-mat X-unscaled))\n                X-unscaled)]\n    result))\n```\n:::\n\n\n\n## Utility Functions\n\n\n### Explained Variance Analysis\n\nThe *explained variance ratio* helps determine the optimal number of components to retain. The *cumulative explained variance* shows how much of the total variance is captured by the first $k$ components:\n\n\n::: {.sourceClojure}\n```clojure\n(defn explained-variance-cumsum\n  \"Computes cumulative explained variance ratio.\"\n  [pca-model]\n  (reductions + (:explained_variance_ratio pca-model)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn n-components-for-variance\n  \"Determines number of components needed to explain desired variance ratio.\"\n  [pca-model target-variance]\n  (let [cumsum (explained-variance-cumsum pca-model)]\n    (inc (count (take-while #(< % target-variance) cumsum)))))\n```\n:::\n\n\n\n### Example Usage\n\nTransform a simple 2x3 matrix:\n\n\n::: {.sourceClojure}\n```clojure\n(transform (fge 2 3 [1 2 3 4 5 6]) \n          (pca-fit (fge 2 3 [1 2 3 4 5 6])))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n#RealGEMatrix[float, mxn:2x3, layout:column]\n   ▥       ↓       ↓       ↓       ┓    \n   →       1.22    0.00    0.00         \n   →      -1.22   -0.00   -0.00         \n   ┗                               ┛    \n\n\n```\n:::\n\n\nReconstruct the original data:\n\n\n::: {.sourceClojure}\n```clojure\n(inverse-transform (fge 2 3 [1.22 -1.22 0 0 0 0 0]) \n                  (pca-fit (fge 2 3 [1 2 3 4 5 6])))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n#RealGEMatrix[float, mxn:2x3, layout:column]\n   ▥       ↓       ↓       ↓       ┓    \n   →       1.00    3.00    5.00         \n   →       2.00    4.00    6.00         \n   ┗                               ┛    \n\n\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"highlight-style":"atom-one","output-file":"neandersolve.pca.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":"united","code-block-background":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}